// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import dependency "github.com/dexterorion/smartmei/dependency"
import mock "github.com/stretchr/testify/mock"
import models "github.com/dexterorion/smartmei/models"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// ExchangeService provides a mock function with given fields:
func (_m *Service) ExchangeService() dependency.ExchangeService {
	ret := _m.Called()

	var r0 dependency.ExchangeService
	if rf, ok := ret.Get(0).(func() dependency.ExchangeService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dependency.ExchangeService)
		}
	}

	return r0
}

// GetConvertedData provides a mock function with given fields: ctx, url, from, to
func (_m *Service) GetConvertedData(ctx context.Context, url string, from string, to []string) (*models.CrawlerResponse, error) {
	ret := _m.Called(ctx, url, from, to)

	var r0 *models.CrawlerResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) *models.CrawlerResponse); ok {
		r0 = rf(ctx, url, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CrawlerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string) error); ok {
		r1 = rf(ctx, url, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartMeiService provides a mock function with given fields:
func (_m *Service) StartMeiService() dependency.StartMeiService {
	ret := _m.Called()

	var r0 dependency.StartMeiService
	if rf, ok := ret.Get(0).(func() dependency.StartMeiService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dependency.StartMeiService)
		}
	}

	return r0
}
